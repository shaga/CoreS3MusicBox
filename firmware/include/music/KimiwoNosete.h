#ifndef KIMIWO_NOSETE_H_
#define KIMIWO_NOSETE_H_

#include "MusicData.h"

static const char KimiNoteName[] = "君をのせて";
static const int KimiNoteSize = 314;
static const NoteData_t KimiNotes[] = {
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  // A
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 4),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 4),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 6),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(64, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(66, 2),
  SINGLE_PITCH_NOTE(66, 4),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(71, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  // A'
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 12),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(72, 8),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(68, 4),
  // A'1
  SINGLE_PITCH_NOTE(69, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  // B
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(79, 4),
  SINGLE_PITCH_NOTE(74, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(76, 12),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(67, 4),
  SINGLE_PITCH_NOTE(77, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 24),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(76, 4),
  // C
  SINGLE_PITCH_NOTE(81, 8),
  SINGLE_PITCH_NOTE(79, 6),
  SINGLE_PITCH_NOTE(79, 2),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(79, 6),
  SINGLE_PITCH_NOTE(76, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(81, 8),
  SINGLE_PITCH_NOTE(79, 8),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 6),
  SINGLE_PITCH_NOTE(71, 4),
  // C1
  SINGLE_PITCH_NOTE(69, 12),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),

  // A
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 4),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 4),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 6),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(64, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(66, 2),
  SINGLE_PITCH_NOTE(66, 4),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(71, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  // A'
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 12),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(72, 8),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(68, 4),
  // A'1
  SINGLE_PITCH_NOTE(69, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),

  // B
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(79, 4),
  SINGLE_PITCH_NOTE(74, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(76, 12),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(67, 4),
  SINGLE_PITCH_NOTE(77, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 24),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(76, 4),
  // C
  SINGLE_PITCH_NOTE(81, 8),
  SINGLE_PITCH_NOTE(79, 6),
  SINGLE_PITCH_NOTE(79, 2),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 8),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(79, 6),
  SINGLE_PITCH_NOTE(76, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(81, 8),
  SINGLE_PITCH_NOTE(79, 8),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(72, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(74, 6),
  SINGLE_PITCH_NOTE(71, 4),
  // C2
  SINGLE_PITCH_NOTE(69, 12),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),

  // A
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 4),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 4),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 6),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 2),
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(64, 8),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(66, 2),
  SINGLE_PITCH_NOTE(66, 4),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(71, 8),
  REST_NOTE(4),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 2),
  // A'
  SINGLE_PITCH_NOTE(72, 6),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(76, 4),
  SINGLE_PITCH_NOTE(71, 12),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(67, 2),
  SINGLE_PITCH_NOTE(69, 4),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(67, 12),
  REST_NOTE(2),
  SINGLE_PITCH_NOTE(64, 2),
  SINGLE_PITCH_NOTE(65, 4),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 6),
  SINGLE_PITCH_NOTE(72, 4),
  SINGLE_PITCH_NOTE(74, 2),
  SINGLE_PITCH_NOTE(74, 4),
  SINGLE_PITCH_NOTE(76, 2),
  SINGLE_PITCH_NOTE(72, 8),
  SINGLE_PITCH_NOTE(72, 2),
  SINGLE_PITCH_NOTE(71, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(69, 2),
  SINGLE_PITCH_NOTE(71, 4),
  SINGLE_PITCH_NOTE(68, 4),
  // Coda
  SINGLE_PITCH_NOTE(69, 6),
  SINGLE_PITCH_NOTE(68, 2),
  DOUBLE_PITCH_NOTE(70, 62, 14),
  DOUBLE_PITCH_NOTE(70, 62, 2),
  DOUBLE_PITCH_NOTE(72, 64, 14),
  DOUBLE_PITCH_NOTE(72, 64, 2),
  DOUBLE_PITCH_NOTE(74, 65, 34),
  DOUBLE_PITCH_NOTE(74, 66, 16),
};

const MusicInfo_t KimiwoNoseteInfo{
  KimiNoteName,
  KimiNoteSize,
  KimiNotes,
  1152
};

#endif //KIMIWO_NOSETE_H_
